version: '3.8'

services:
  docsend-parser:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - SLACK_SIGNING_SECRET=${SLACK_SIGNING_SECRET}
      - SLACK_APP_TOKEN=${SLACK_APP_TOKEN}
      - DOCSEND_VIEWER_EMAIL=${DOCSEND_VIEWER_EMAIL}
      - DOCSEND_EMAIL_PROVIDER=${DOCSEND_EMAIL_PROVIDER:-gmail}
      - EMAIL_INBOX_CREDENTIALS=${EMAIL_INBOX_CREDENTIALS}
      - LOG_LEVEL=${LOG_LEVEL:-debug}
      - LOG_FORMAT=${LOG_FORMAT:-json}
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for rate limiting and caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes

  # MongoDB for job tracking (optional)
  mongodb:
    image: mongo:6
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - mongodb_data:/data/db
    restart: unless-stopped

  # MinIO for S3-compatible storage (optional)
  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    restart: unless-stopped
    command: server /data --console-address ":9001"

volumes:
  redis_data:
  mongodb_data:
  minio_data: 